#!/usr/bin/env bash

# Git: Determine current git branch
function git_branch_name() {
  git rev-parse --abbrev-ref HEAD
}

# Git: Prepend current branch name to commit message
function gcb() {
  BRANCH=$(git_branch_name)

  if [ $BRANCH == "master" ] ; then
    echo "Currently on master"
    return
  fi

  git commit -m "$BRANCH: $1"
}

# Git: Clean current branch after it's been merged
function gmerged() {
  BRANCH=$(git_branch_name)

  if [ $BRANCH == "master" ] ; then
    echo "Cannot prune master"
    return
  fi

  TRUNK="master"
  FORCE=false

  for i in "$@" ; do
    case "$i" in
      ( -f | --force ) FORCE=true; shift;;
      ( * ) TRUNK=$1; shift;;
    esac
  done

  if [ $FORCE == true ] ; then
    DELETE_FLAG="D"
  else
    DELETE_FLAG="d"
  fi

  if [ $BRANCH == $TRUNK ] ; then
    echo "Cannot prune into self"
    return
  fi

  git stash && git checkout $TRUNK && git pull origin $TRUNK && git branch -${DELETE_FLAG} $BRANCH && git branch -${DELETE_FLAG}r origin/$BRANCH
}

# Git: Enter interactive mode to squash the number of commits specified
function gsquash() {
  if [ -z "$1" ] ; then
    echo "Usage: squash <num_commits>"
    return
  fi

  git stash && git rebase -i HEAD~$1
}

# Reset all directory and file permissions to 0775 and 0664, respectively, in the current directory
function reset-chmod() {
  find . -type d -print0 | xargs -0 chmod 0775
  find . -type f -print0 | xargs -0 chmod 0664
}

# Use Gitâ€™s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
  function diff() {
    git diff --no-index --color-words "$@";
  }
fi;
