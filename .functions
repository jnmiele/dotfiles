#!/usr/bin/env bash

# Use Gitâ€™s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
  function diff() {
    git diff --no-index --color-words "$@";
  }
fi;

function download_composer() {
  EXPECTED_SIGNATURE="$(wget -q -O - https://composer.github.io/installer.sig)"
  php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
  ACTUAL_SIGNATURE="$(php -r "echo hash_file('SHA384', 'composer-setup.php');")"

  if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ] ; then
      >&2 echo 'ERROR: Invalid installer signature'
      rm composer-setup.php
      return 1
  fi

  php composer-setup.php --quiet
  RESULT=$?
  rm composer-setup.php
  return $RESULT
}

# Git: Prepend current branch name to commit message
function gcb() {
  current_branch=$(git_branch_name)

  if [ $current_branch == "development" ] || [ $current_branch == "master" ] ; then
    echo "Cannot commit message with branch name $current_branch"
    return 1
  fi

  commit_branch=$(echo "$current_branch" | sed -E 's/^(bug|feature|hotfix|release|task)\///')

  git commit -m "$commit_branch: $1"
}

# Git: Determine current branch
function git_branch_name() {
  git rev-parse --abbrev-ref HEAD
}

# Git: Count committed lines per author
function git_line_count() {
  if [ -z "$1" ] ; then
    files=`git ls-files .`
  else
    files=`git ls-files $1`
  fi

  echo $files | xargs -n1 git blame -wM --line-porcelain | sed -n 's/^author //p' | sort -f | uniq -ic | sort -nr
}

# Git: Update all immediate subdirectories
function git_update_all() {
  echo "Pulling in latest changes for all repositories..."

  # Find all git repositories and update it to the master latest revision
  for i in $(find . -maxdepth 2 -mindepth 2 -name ".git" | cut -c 3-); do
    echo ""
    echo "Updating $i..."

    (
      cd $(dirname $i)

      gfp
    )
  done

  echo ""
  echo "Complete!"
}

# Git: Clean current branch after it's been merged
function gprune() {
  active_branch=$(git_branch_name)
  development_exists=$(git rev-parse --verify --quiet development)

  if [ $active_branch == "development" ] || [ $active_branch == "master" ] ; then
    echo "Cannot prune $active_branch"
    return 1
  fi

  force=false
  trunk="master"

  if [ $development_exists ] ; then
    trunk="development"
  fi

  for i in "$@" ; do
    case "$i" in
      ( -f | --force ) force=true; shift;;
      ( * ) trunk=$1; shift;;
    esac
  done

  if [ $force == true ] ; then
    delete_flag="D"
  else
    delete_flag="d"
  fi

  if [ $active_branch == $trunk ] ; then
    echo "Cannot prune into self"
    return 1
  fi

  git stash && git checkout $trunk && git pull origin $trunk && git branch -${delete_flag} $active_branch && git fetch --prune
}

# Git: Rebase current branch
function grebase() {
  active_branch=$(git_branch_name)
  development_exists=$(git rev-parse --verify --quiet development)

  if [ $active_branch == "development" ] || [ $active_branch == "master" ] ; then
    echo "Cannot rebase $active_branch"
    return 1
  fi

  trunk="master"

  if [ $development_exists ] ; then
    trunk="development"
  fi

  for i in "$@" ; do
    case "$i" in
      ( * ) trunk=$1; shift;;
    esac
  done

  if [ $active_branch == $trunk ] ; then
    echo "Cannot rebase into self"
    return 1
  fi

  git stash && git checkout $trunk && git fetch --prune && git pull origin $trunk && git checkout - && git rebase $trunk
}

# Git: Enter interactive mode to squash the number of commits specified
function gsquash() {
  if [ -z "$1" ] ; then
    echo "Usage: squash <num_commits>"
    return 1
  fi

  git stash && git rebase -i HEAD~$1
}

# Install linux ISO to the selected device
function install_linux() {
  if [[ $# -eq 0 ]] ; then
    echo 'Input file required'
    return 1
  fi

  if [ ! -f $1 ] ; then
    echo "Input file not found."
    return 1
  fi

  lsblk -o NAME,LABEL

  echo ""
  read -p "Which device would you like install to? " input

  device=/dev/$input

  if [ ! -b $device ] ; then
    echo "Invalid device"
    return 1
  fi

  size=`stat --print="%s" $1`

  date
  sudo bash -c "dd if=$1 | pv -s $size | dd of=$device bs=4M"
  date
}

# Execute whatever command + arguments are passed in every 5 seconds
function loop5() {
  while true; do $@ && echo ""; sleep 5; done;
}

# Reset all directory and file permissions to 0775 and 0664, respectively, in the current directory
function reset_chmod() {
  find . -type d -print0 | xargs -0 chmod 0775
  find . -type f -print0 | xargs -0 chmod 0664
}

# Touch all files under the current directory
function touch_files() {
  find . -type f -print0 | xargs -0 touch
}

# Wipe selected device by overwriting with random data
function wipe_device() {
  lsblk -o NAME,LABEL

  echo ""
  read -p "Which device would you like to wipe? " input

  device=/dev/$input

  if [ ! -b $device ] ; then
    echo "Invalid device"
    return 1
  fi

  size=`sudo blockdev --getsize64 $device`

  date
  sudo bash -c "dd if=/dev/urandom | pv -s $size | dd of=$device bs=4M"
  date
}

####################
# GCloud functions #
####################
export GCLOUD_ACCOUNT=justin.roman@soul-cycle.com
export GCLOUD_ACCOUNT_EMAIL=justin.roman@soul-cycle.com
function setPodiumDevStageGCPCreds() {
  gcloud config configurations activate default
  unset GCP_PROJECT
  unset GCP_CONFIG_NAME
  unset creds_file
  unset GOOGLE_CREDENTIALS
  unset GCP_STATE_BUCKET
  unset GKE_CLUSTER
  GCP_PROJECT="podium-devstage"
  creds_file="$PODIUMPATH/applications/go/src/github.com/soulcycle/pops/provisioning/terraform/podium/envs/podium-devstage/sa-keys/terraform-owner-${GCP_PROJECT}-credentials.json"
  echo "-----------------------------------------------------"
  echo "Setting up Google Credentials for ${GCP_PROJECT}"
  echo "-----------------------------------------------------"
  printf "Using creds file: \n\t${creds_file}\n"
  echo "Setting gcloud config... project: $GCP_PROJECT"
  # Activate GCP config
  GCP_CONFIG_NAME=$GCP_PROJECT
  gcloud config configurations activate $GCP_CONFIG_NAME
  gcloud config set project $GCP_PROJECT
  export GOOGLE_CREDENTIALS=$creds_file

  gcloud config set compute/zone us-east1
  gcloud config set container/cluster east1-cluster

  export GCP_PROJECT=$(gcloud config get-value core/project)
  export GCP_STATE_BUCKET=${GCP_PROJECT}-terraform-state
  export GKE_CLUSTER=$(gcloud config get-value container/cluster)
  alias tfint="terraform init -backend-config='bucket=${GCP_STATE_BUCKET}'"
  kctlauth $GKE_CLUSTER
}

function setPlaygroundGCPCreds() {
  gcloud config configurations activate default
  unset GCP_PROJECT
  unset GCP_CONFIG_NAME
  unset creds_file
  unset GOOGLE_CREDENTIALS
  unset GCP_STATE_BUCKET
  unset GKE_CLUSTER
  GCP_PROJECT="justins-playground"
  creds_file="$PODIUMPATH/applications/go/src/github.com/soulcycle/pops/provisioning/terraform/podium/envs/playgrounds/mbastian/sa-keys/terraform-owner-${GCP_PROJECT}-credentials.json"
  echo "-----------------------------------------------------"
  echo "Setting up Google Credentials for ${GCP_PROJECT}"
  echo "-----------------------------------------------------"
  printf "Using creds file: \n\t${creds_file}\n"
  echo "Setting gcloud config... project: $GCP_PROJECT"
  # Activate GCP config
  GCP_CONFIG_NAME=$GCP_PROJECT
  gcloud config configurations activate $GCP_CONFIG_NAME
  gcloud config set project $GCP_PROJECT
  export GOOGLE_CREDENTIALS=$creds_file

  gcloud config set compute/zone us-east1
  gcloud config set container/cluster east1-cluster

  export GCP_PROJECT=$(gcloud config get-value core/project)
  export GCP_STATE_BUCKET=${GCP_PROJECT}-terraform-state
  export GKE_CLUSTER=$(gcloud config get-value container/cluster)
  alias tfint="terraform init -backend-config='bucket=${GCP_STATE_BUCKET}'"
  kctlauth $GKE_CLUSTER
}

function setPodiumLoadTestGCPCreds() {
  gcloud config configurations activate default
  unset GCP_PROJECT
  unset GCP_CONFIG_NAME
  unset creds_file
  unset GOOGLE_CREDENTIALS
  unset GCP_STATE_BUCKET
  unset GKE_CLUSTER
  GCP_PROJECT="podium-loadtest"
  creds_file="$PODIUMPATH/applications/go/src/github.com/soulcycle/pops/provisioning/terraform/podium/envs/podium-loadtest/sa-keys/terraform-owner-${GCP_PROJECT}-credentials.json"
  echo "-----------------------------------------------------"
  echo "Setting up Google Credentials for ${GCP_PROJECT}"
  echo "-----------------------------------------------------"
  printf "Using creds file: \n\t${creds_file}\n"
  echo "Setting gcloud config... project: $GCP_PROJECT"
  # Activate GCP config
  GCP_CONFIG_NAME=$GCP_PROJECT
  gcloud config configurations activate $GCP_CONFIG_NAME

  gcloud config set account $GCLOUD_ACCOUNT_EMAIL
  gcloud config set project $GCP_PROJECT
  export GOOGLE_CREDENTIALS=$creds_file


  # Create and activate if it doesn't exist
  [ $? != 0 ] && gcloud config configurations create $GCP_CONFIG_NAME
  gcloud config set compute/zone us-east1
  gcloud config set container/cluster east1-cluster

  export GCP_PROJECT=$(gcloud config get-value core/project)
  export GCP_STATE_BUCKET=${GCP_PROJECT}-terraform-state
  export GKE_CLUSTER=$(gcloud config get-value container/cluster)
  alias tfint="terraform init -backend-config='bucket=${GCP_STATE_BUCKET}'"
  kctlauth $GKE_CLUSTER
}


function setPodiumProdGCPCreds() {
  gcloud config configurations activate default
  unset GCP_PROJECT
  unset GCP_CONFIG_NAME
  unset creds_file
  unset GOOGLE_CREDENTIALS
  unset GCP_STATE_BUCKET
  unset GKE_CLUSTER
  GCP_PROJECT="podium-production"
  creds_file="$PODIUMPATH/applications/go/src/github.com/soulcycle/pops/provisioning/terraform/podium/envs/podium-production/sa-keys/terraform-owner-${GCP_PROJECT}-credentials.json"
  echo "-----------------------------------------------------"
  echo "Setting up Google Credentials for ${GCP_PROJECT}"
  echo "-----------------------------------------------------"
  printf "Using creds file: \n\t${creds_file}\n"
  echo "Setting gcloud config... project: $GCP_PROJECT"

  # Activate GCP config
  GCP_CONFIG_NAME=$GCP_PROJECT
  gcloud config configurations activate $GCP_CONFIG_NAME

  gcloud config set account $GCLOUD_ACCOUNT_EMAIL
  gcloud config set project $GCP_PROJECT
  export GOOGLE_CREDENTIALS=$creds_file

  # Create and activate if it doesn't exist
  [ $? != 0 ] && gcloud config configurations create $GCP_CONFIG_NAME
  gcloud config set compute/zone us-east1
  gcloud config set container/cluster east1-cluster

  export GCP_PROJECT=$(gcloud config get-value core/project)
  export GCP_STATE_BUCKET=${GCP_PROJECT}-terraform-state
  export GKE_CLUSTER=$(gcloud config get-value container/cluster)
  alias tfint="terraform init -backend-config='bucket=${GCP_STATE_BUCKET}'"
  kctlauth $GKE_CLUSTER
}

function setPodiumSweatworksGCPCreds() {
  gcloud config configurations activate default
  unset GCP_PROJECT
  unset GCP_CONFIG_NAME
  unset creds_file
  unset GOOGLE_CREDENTIALS
  unset GCP_STATE_BUCKET
  unset GKE_CLUSTER
  GCP_PROJECT="sweatworks-playground"
  creds_file="$PODIUMPATH/applications/go/src/github.com/soulcycle/pops/provisioning/terraform/podium/envs/playgrounds/sweatworks/sa-keys/terraform-owner-${GCP_PROJECT}-credentials.json"
  echo "-----------------------------------------------------"
  echo "Setting up Google Credentials for ${GCP_PROJECT}"
  echo "-----------------------------------------------------"
  printf "Using creds file: \n\t${creds_file}\n"
  echo "Setting gcloud config... project: $GCP_PROJECT"

  # Activate GCP config
  GCP_CONFIG_NAME=$GCP_PROJECT
  gcloud config configurations activate $GCP_CONFIG_NAME

  gcloud config set account $GCLOUD_ACCOUNT_EMAIL
  gcloud config set project $GCP_PROJECT
  export GOOGLE_CREDENTIALS=$creds_file

  # Create and activate if it doesn't exist
  [ $? != 0 ] && gcloud config configurations create $GCP_CONFIG_NAME
  gcloud config set compute/zone us-east1-b
  gcloud config set container/cluster east1-cluster

  export GCP_PROJECT=$(gcloud config get-value core/project)
  export GCP_STATE_BUCKET=${GCP_PROJECT}-terraform-state
  export GKE_CLUSTER=$(gcloud config get-value container/cluster)
  alias tfint="terraform init -backend-config='bucket=${GCP_STATE_BUCKET}'"
  kctlauth $GKE_CLUSTER
}

createNewGCPConfig() {
  # The name of the GCP config
  name=$1
  [[ "$1" == "" ]] && echo "[ERROR] Please provide the name of the config to be created." && return
  [[ "$GCLOUD_ACCOUNT" == "" ]] && echo "[ERROR] Please set the GCLOUD_ACCOUNT env var with your email address." && return

  echo "-----------------------------------------------------"
  echo "Creating gcloud project configuration: ${name}"
  echo "-----------------------------------------------------"
  gcloud config configurations create $name
  [[ $? -ne 0 ]] && echo "[ERROR] Failed to create config." && return

  echo "Activating config: ${name}"
  gcloud config configurations activate $name
  [[ $? -ne 0 ]] && echo "[ERROR] Failed to activate config." && return

  echo "Setting project of config to: ${name}"
  gcloud config set project $name
  [[ $? -ne 0 ]] && echo "[ERROR] Failed to set project in config." && return

  echo "Setting account of config to: ${GCLOUD_ACCOUNT}"
  gcloud config set account $GCLOUD_ACCOUNT
  [[ $? -ne 0 ]] && echo "[ERROR] Failed to set project in config." && return

  echo "Finished setting up new GCP config."
  echo "-----------------------------------------------------"
}
